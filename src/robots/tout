#!/usr/bin/env python
# vim: set fileencoding=utf-8:

import csv
import os
import sys
import urllib
import urllib2
from lxml import etree

COMMON_LABEL = 'music'
COUNTRIES = ('Russian Federation', )

settings = None

def get_artist_names():
    cur = ardj.Open().database.cursor()
    rows = cur.execute('SELECT DISTINCT artist FROM tracks WHERE id IN (SELECT track_id FROM labels WHERE label = ?)', (COMMON_LABEL, )).fetchall()
    # Select lowercase names, not rows.
    rows = [row[0].lower() for row in rows]
    # Delete duplicates.
    rows = list(set(rows))
    # Sort and get out.
    return sorted(rows)

def get_events(names):
    print '%u artists found.' % len(names)
    result = []
    for name in names:
        url = 'http://ws.audioscrobbler.com/2.0/?method=artist.getevents&artist=%s&api_key=%s' % (urllib.quote(name.encode('utf-8')), settings['key'])
        try:
            xml = urllib2.urlopen(urllib2.Request(url)).read()
            doc = etree.XML(xml)
            for event in doc.xpath('/lfm/events/event'):
                country = event.xpath('venue/location/country/text()')[0]
                city = event.xpath('venue/location/city/text()')[0]
                date = event.xpath('startDate/text()')[0]
                result.append([name, date, country, city])
                print '%s: %s @ %s' % (name, date, city)
        except Exception, e:
            print >>sys.stderr, u'Could not read events for %s: %s' % (name, e)
    return result

def update_events_csv():
    filename = settings['events.csv']
    if os.path.exists(filename):
        print '%s exists, not updating.' % filename
        return
    f = open(filename, 'wb')
    out = csv.writer(f)
    events = get_events(get_artist_names(cur))
    for event in events:
        out.writerow([cell.encode('utf-8') for cell in event])
    f.close()

def get_event_map():
    result = {}
    csvname = settings['events.csv']
    for row in csv.reader(open(csvname, 'rb')):
        name = row[0].decode('utf-8')
        city = row[3].decode('utf-8').split(',')[0]
        if row[2].decode('utf-8') in COUNTRIES:
            date = row[1][:16]
            if not result.has_key(date):
                result[date] = {}
            result[date][name] = city
    return result


def dump_event_map(m):
    for date in m.keys():
        print date
        for artist in m[date].keys():
            print '  %s, %s' % (artist, m[date][artist])

if __name__ == '__main__':
    if not os.path.abspath(sys.argv[0]).startswith('/usr'):
        src_dir = os.path.abspath(os.path.join(os.path.dirname(sys.argv[0]), '..'))
        sys.path.insert(0, src_dir)

    import ardj
    import ardj.settings

    settings = ardj.settings.load('last.fm')

    dump_event_map(get_event_map())
