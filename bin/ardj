#!/usr/bin/env python
# vim: set ts=4 sts=4 sw=4 noet fileencoding=utf-8:

import getopt
import os
import sys
import traceback

def usage():
	print "Usage: %s [options]" % os.path.basename(sys.argv[0])
	print "\nBasic options:"
	print " --backup     save metadata to file tags"
	print " --config     edit config file"
	print " --dbconsole  open SQLite console"
	print " --jabber     run a jabber bot"
	print " --next       show next track"
	print " --quiet      suppress log messages (stderr)"
	print " --reset      reset database"
	print " --scrobble   scrobble track (only makes sense with --next)"
	print " --stats      show database statistics"
	print " --update     update database"
	return 1

def run(commands, args):
	if type(commands) != list:
		commands = [commands]
	dirs = os.getenv('PATH').split(os.pathsep)
	for command in [x for x in commands if x]:
		for dir in dirs:
			cmd = os.path.join(dir, command)
			if command and os.path.exists(cmd):
				args.insert(0, os.path.basename(cmd))
				return os.execv(cmd, args)
	print >>sys.stderr, '%s not found in $PATH.' % '|'.join(commands)
	sys.exit(1)

if __name__ == '__main__':
	# Allow running from sources.
	if not os.path.abspath(sys.argv[0]).startswith('/usr'):
		sys.path.insert(0, os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(sys.argv[0]))), 'src'))
		# print >>sys.stderr, 'Using modules from %s.' % sys.path[0]

	from ardj import Open
	ardj = Open()

	try:
		opts, args = getopt.getopt(sys.argv[1:], 'i', ['backup', 'config', 'dbconsole', 'jabber', 'jabber-child', 'next', 'quiet', 'reset', 'scrobble', 'stats', 'update'])
	except getopt.GetoptError:
		sys.exit(usage())

	if not len(opts):
		sys.exit(usage())

	# prepare for work
	for option, value in opts:
		if '--quiet' == option:
			sys.stderr = None

	for option, value in opts:
		if '--backup' == option:
			import db
			idx, tracks = 1, db.track.get_all()
			for track in tracks:
				if os.path.exists(track.path):
					print '%u/%u\r' % (idx, len(tracks)),
					sys.stdout.flush()
					track.backup()
				idx += 1
			print
		if '--dbconsole' == option:
			run('sqlite3', [ardj.config.get_db_name()])
		if '--config' == option:
			run([os.getenv('EDITOR'), 'editor'], [ardj.config.filename])
		if '--jabber' == option:
			import subprocess, time, log
			while True:
				if not subprocess.Popen([sys.argv[0], '--jabber-child']).wait():
					sys.exit(0)
				log.log('Unclean shutdown, restarting in 5 seconds.')
				time.sleep(5)
		if '--jabber-child' == option:
			from jabber import run
			run()
		if '--next' == option:
			track = ardj.next()
			if track is None:
				print >>sys.stderr, 'Could not find a track to play.'
				sys.exit(1)
			if ('--scrobble', '') in opts:
				track.scrobble()
			print track['filepath']
		if '--reset' == option:
			filename = ardj.config.get_db_name()
			if os.path.exists(filename):
				os.unlink(filename)
				print 'OK'
		if '--stats' == option:
			stats = ardj.get_stats()
			print '%u tracks, %.1f hours.' % (stats['tracks'], stats['seconds'] / 60 / 60)
		if '--update' == option:
			ardj.sync()
