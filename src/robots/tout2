#!/usr/bin/env python
# vim: set fileencoding=utf-8:

import ardj
import ardj.settings
import ardj.website
import ardj.tags
import datetime
import json
import os
import random
import shutil
import sys
import subprocess
import tempfile
import time
import urllib
import urllib2

settings = None

def get_artist_names():
    cur = ardj.Open().database.cursor()
    return sorted([row[0] for row in cur.execute('SELECT DISTINCT artist FROM tracks WHERE id IN (SELECT track_id FROM labels WHERE label = ?) AND weight >= ?', (settings.get('label', 'music'), float(settings.get('weight', '1.0')), )).fetchall()])

def fetch_artist_events(artist_name):
    events = []

    try:
        url = 'http://ws.audioscrobbler.com/2.0/?method=artist.getEvents&artist=%s&api_key=%s&format=json&autocorrect=1' % (urllib.quote(artist_name.encode('utf-8')), settings.get('lastfm_api_key'))
        data = json.loads(urllib2.urlopen(urllib2.Request(url)).read())

        if not data.has_key('events'):
            print 'Oops: %s had no "events" block -- no such artist?' % artist_name.encode('utf-8')
            return []
        data = data['events']

        if data.has_key('artist'):
            artist_name = data['artist']
        elif data.has_key('@attr') and data['@attr'].has_key('artist'):
            artist_name = data['@attr']['artist']

        if data.has_key('event'):
            for event in (type(data['event']) == list) and data['event'] or [data['event']]:
                if event['cancelled'] != '0':
                    continue
                events.append({
                    'id': int(event['id']),
                    'artist': artist_name,
                    'startDate': time.strftime('%Y-%m-%d', time.strptime(event['startDate'][:16], '%a, %d %b %Y')),
                    'url': event['url'],
                    'country': event['venue']['location']['country'],
                    'city': event['venue']['location']['city'],
                    'venue': event['venue']['name'],
                    'venue_url': event['venue']['url'],
                    'venue_location': event['venue']['location']['geo:point'],
                })
    except Exception, e:
        print >>sys.stderr, 'ERROR fetching events for %s: %s' % (artist_name.encode('utf-8'), e)
    return events

def fetch_events():
    cache_fn = settings.getpath('cache', '~/.config/ardj/events.json')

    if os.path.exists(cache_fn):
        if time.time() - os.stat(cache_fn).st_mtime < int(settings.get('cache_ttl', '3600')):
            return json.loads(open(cache_fn, 'rb').read())

    events = []
    for artist_name in sorted(list(set([n.lower() for n in get_artist_names()]))):
        events += fetch_artist_events(artist_name)

    open(cache_fn, 'wb').write(json.dumps(events))
    return events

def update_website():
    data = { 'bounds': [], 'markers': [] }
    for event in fetch_events():
        if event['venue_location']['geo:long'] and event['venue_location']['geo:lat']:
            data['markers'].append({
                'll': [float(event['venue_location']['geo:lat']), float(event['venue_location']['geo:long'])],
                'html': u'<p><strong>%s</strong><br/>%s, %s<br/>%s</p><p class="more"><a href="%s" target="_blank">Подробности</a></p>' % (event['artist'], event['venue'], event['city'], '.'.join(reversed(event['startDate'].split('-'))), event['url']),
            })
    data['bounds'].append(min([e['ll'][0] for e in data['markers']]))
    data['bounds'].append(max([e['ll'][0] for e in data['markers']]))
    data['bounds'].append(min([e['ll'][1] for e in data['markers']]))
    data['bounds'].append(max([e['ll'][1] for e in data['markers']]))

    filename = settings.getpath('website_js', '~/.config/ardj/event-map.js')
    output = 'var map_data = %s;' % json.dumps(data)
    open(filename, 'wb').write(output)
    print 'Wrote %s' % filename

    ardj.website.update()

def get_announce_text():
    u"Возвращает текст для диктовки роботом."
    data = {}
    date_limit = time.strftime('%Y-%m-%d', time.localtime(time.time() + int(settings.get('announce_time_limit', 86400*14))))

    countries = settings.get('announce_countries')
    for event in fetch_events():
        if not countries or event['country'] in countries:
            date = event['startDate']
            if date < date_limit:
                city = event['city'].split(',')[0]
                if not data.has_key(date):
                    data[date] = {}
                if not data[date].has_key(city):
                    data[date][city] = []
                if event['artist'] not in data[date][city]:
                    data[date][city].append(event['artist'])

    output = settings.get('announce_prefix', u'').strip() + u'\n\n'
    for date in sorted(data.keys()):
        output += xlat_date(date) + u'.\n'
        for city in sorted(data[date].keys()):
            output += xlat_city(city)
            for artist in sorted(data[date][city]):
                output += u', ' + xlat_artist(artist)
            output += u'.\n\n'
    output += settings.get('announce_suffix', u'')
    return output.strip()

def update_announce():
    text_fn = tempfile.mkstemp(prefix='ardj_tout_', suffix='.txt')[1]
    open(text_fn, 'wb').write(get_announce_text().encode('utf-8'))
    print 'Wrote speech text to %s' % text_fn

    speech_fn = tempfile.mkstemp(prefix='ardj_tout_', suffix='.wav')[1]
    subprocess.Popen(['text2wave', '-eval', '(voice_msu_ru_nsh_clunits)', text_fn, '-o', speech_fn]).wait()
    print 'Wrote speech wave to %s' % speech_fn

    result_fn = tempfile.mkstemp(prefix='ardj_tout_', suffix='.ogg')[1]
    subprocess.Popen(['sox', speech_fn, '-r', '44100', result_fn, 'pad', '3', '5']).wait()
    os.chmod(result_fn, 0664)
    print 'Wrote result to %s' % result_fn

    target_fn = settings.getpath('announce_file')
    if os.path.exists(target_fn):
        os.unlink(target_fn)
        shutil.move(result_fn, target_fn)
        result_fn = target_fn

    track_id = int(settings.get('track_id', '0'))
    if track_id:
        a = ardj.Open()
        length = ardj.tags.raw(result_fn).info.length
        a.database.cursor().execute('UPDATE tracks SET length = ? WHERE id = ?', (length, track_id, ))
        a.database.commit()

    os.unlink(text_fn)
    os.unlink(speech_fn)

def get_background_fn():
    filename = settings.getpath('announce_background', '~/this file should not exist')
    if not os.path.exists(filename):
        a = ardj.Open()
        cur = a.database.cursor()
        tracks = sorted([row[0] for row in cur.execute('SELECT filename FROM tracks WHERE id IN (SELECT track_id FROM labels WHERE label = ?) ORDER BY weight DESC LIMIT 10', (settings.get('label', 'music'), )).fetchall()])
        if not len(tracks):
            return None
        filename = os.path.join(a.config.get_music_dir(), tracks[random.randrange(0, len(tracks))])
    if not os.path.exists(filename):
        return None
    return filename

def xlat_date(date):
    months = [u'января', u'февраля', u'марта', u'апреля', u'мая', u'июня', u'июля', u'августа', u'сентября', u'октября', u'ноября', u'декабря']
    days = [u'Первого', u'Второго', u'Третьего', u'Четвёртого', u'Пятого', u'Шестого', u'Седьмого', u'Восьмого', u'Девятого', u'Десятого', u'Одиннадцатого', u'Двенадцатого', u'Тринадцатого', u'Четырнадцатого', u'Пятнадцатого', u'Шестнадцатого', u'Семнадцатого', u'Восемнадцатого', u'Девятнадцатого', u'Двадцатого', u'Двадцать первого', u'Двадцать второго', u'Двадцать третьего', u'Двадцать четвёртого', u'Двадцать пятого', u'Двадцать шестого', u'Двадцать седьмого', u'Двадцать восьмого', u'Двадцать девятого', u'Тридцатого', u'Тридцать первого']

    date = datetime.datetime.strptime(date, '%Y-%m-%d')
    output = u'%s %s' % (days[date.day - 1], months[date.month - 1])

    return output

def xlat_city(city):
    table = settings.get('city_map', {})
    if table.has_key(city):
        return table[city]
    return city

def xlat_artist(artist):
    table = settings.get('artist_map', {})
    if table.has_key(artist):
        return table[artist]
    return artist

if __name__ == '__main__':
    settings = ardj.settings.load('tout')
    if settings.get('website_js'):
        update_website()
    if settings.get('announce_file'):
        update_announce()
